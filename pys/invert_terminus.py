'''
This code inverts the terminus mask generated by SAM

It is a NON-prompt based generation of masks.

@Siddharth Shankar
'''


from segment_anything import SamPredictor, SamAutomaticMaskGenerator,sam_model_registry
import cv2
import matplotlib.pyplot as plt
import numpy as np
from PIL import Image
import os
import torch

# Define the main working directories, models, paths, and fileNames
# ********************************************************************************

BASE_PATH = r'C:\segment-anything\images\testing\final_manuscript_images\Figure4_features\terminus\predict_no_prompt'
fileName = 'S2B_MSIL1C_20200826T141739_N0209_R096_T24WWU_20200826T144937_terminus_subset2_predict.png'    

terminus_img = np.asarray(Image.open(os.path.join(BASE_PATH,fileName)))
invert_terminus = ~terminus_img
im = Image.fromarray(invert_terminus)
im.save(os.path.join(BASE_PATH,fileName.split('.')[0]+'_invert.png'))




























'''
# Plot the image

for num in range(len(masks)):
    im = Image.fromarray(masks[num]['segmentation'])
    # im.save(os.path.join(OUTPUT_PATH,'terminus_test2_%s.png'%(num)))
'''


'''
os.environ['KMP_DUPLICATE_LIB_OK']='True'

def show_anns(anns):
    if len(anns) == 0:
        return
    sorted_anns = sorted(anns, key=(lambda x: x['area']), reverse=True)
    ax = plt.gca()
    ax.set_autoscale_on(False)
    polygons = []
    color = []
    for ann in sorted_anns:
        m = ann['segmentation']
        img = np.ones((m.shape[0], m.shape[1], 3))
        color_mask = np.random.random((1, 3)).tolist()[0]
        for i in range(3):
            img[:,:,i] = color_mask[i]
        ax.imshow(np.dstack((img, m*0.35)))


plt.figure(figsize=(20,20))
plt.imshow(image)
show_anns(masks)
plt.axis('off')
plt.show() 
# torch.cuda.empty_cache()


binary_masks = []
for num in range(len(masks)):
    binary_masks.append(masks[num]['segmentation'])

final_binary_mask = sum(binary_masks)

# Enable to get binary classification
# final_binary_mask[final_binary_mask>0]=255
final_binary_image = Image.fromarray(final_binary_mask)

# output_path = r'C:\segment-anything\images\icebergs\predict'
# final_binary_image.save(os.path.join(output_path,'%s_predict_vit_h_defaultsetting.png'%(fileName.split('.')[0])))
final_binary_image.save(os.path.join(OUTPUT_PATH,'%s_predict_%s_%s.png'%(fileName.split('.')[0],MODEL_TYPE,OUTPUT_FOLDER)))

# cv2.imwrite('test.jpg',final_binary_mask)
'''